!pip install --upgrade python-telegram-bot 
!pip install python-telegram-bot==13.0
!pip install deepl
!pip install deep_translator
import requests
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackQueryHandler

DEEPL_API_ENDPOINT = 'https://api-free.deepl.com/v2/translate'
DEEPL_API_KEY = 'Insert the key here'

def start(update, context):
    context.bot.send_message(chat_id=update.effective_chat.id, text='üá∫üá¶ –í—ñ—Ç–∞—é! –Ø –≤–∞–º –¥–æ–ø–æ–º–æ–∂—É –ø–µ—Ä–µ–∫–ª–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç! –ù–∞–ø–∏—à—ñ—Ç—å –º–µ–Ω—ñ —Ç–µ–∫—Å—Ç, —ñ —è –∑ —Ä–∞–¥—ñ—Å—Ç—é –ø–µ—Ä–µ–∫–ª–∞–¥—É –π–æ–≥–æ –¥–ª—è –≤–∞—Å.\nüá¨üáß Greetings! I can help you translate your text! Send me your text and I will be happy to translate it for you. ')
    context.bot.send_message(chat_id=update.effective_chat.id, text='üá∫üá¶ –Ø –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –ø–µ—Ä–µ–¥–æ–≤—ñ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó –º–∞—à–∏–Ω–Ω–æ–≥–æ –Ω–∞–≤—á–∞–Ω–Ω—è, —â–æ–± –∑–∞–±–µ–∑–ø–µ—á–∏—Ç–∏ —Ç–æ—á–Ω—ñ—Å—Ç—å —Ç–∞ —è–∫—ñ—Å—Ç—å –ø–µ—Ä–µ–∫–ª–∞–¥—É. –¢–∞–∫, –º—ñ–π –ø–µ—Ä–µ–∫–ª–∞–¥–∞—á “ë—Ä—É–Ω—Ç—É—î—Ç—å—Å—è –Ω–∞ –Ω–µ–π—Ä–æ–Ω–Ω–∏—Ö –º–µ—Ä–µ–∂–∞—Ö, –∑–æ–∫—Ä–µ–º–∞, –Ω–∞ —è–¥—Ä—ñ DeepL, –∞–ª–µ –º—ñ–π –∞–ª–≥–æ—Ä–∏—Ç–º –±—É–≤ –Ω–∞–ø–∏—Å–∞–Ω–∏–π –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –ø–æ—Ç—É–∂–Ω–æ—ó –º–µ—Ä–µ–∂—ñ GPT-4. –Ø–∫—â–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å —Ç–µ—Ö–Ω—ñ—á–Ω–∞ —Å—Ç–æ—Ä–æ–Ω–∞ —Ä–æ–±–æ—Ç–∏, –≤–µ—Å—å –∫–æ–¥ –º–æ–≥–æ –ø–µ—Ä–µ–∫–ª–∞–¥–∞—á–∞ –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π –Ω–∞ GitHub.\nüá¨üáß I use advanced machine learning technologies to ensure translation accuracy and quality. Yes, my translator is based on neural networks, in particular the DeepL kernel, but my algorithm was written using the powerful GPT-4 network. If you are interested in the technical side of the work, the full code of my translator will be available on GitHub. \ngithub.com/cr1ma/TranslateMeBot')
    context.bot.send_message(chat_id=update.effective_chat.id, text='üá∫üá¶ –ë–∞–∂–∞—é –≤–∞–º —É—Å–ø—ñ—à–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è!\nüá¨üáß I wish you a successful use!')

def translate(update, context):
    text = update.message.text
    context.user_data['text_to_translate'] = text

    button_labels = ["–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", "English", "–†—É—Å—Å–∫–∏–π"]
    keyboard_buttons = [InlineKeyboardButton(label, callback_data=label) for label in button_labels]
    reply_markup = InlineKeyboardMarkup([keyboard_buttons])

    context.bot.send_message(chat_id=update.effective_chat.id, text="üá∫üá¶ –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É –≤–∞—à–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\nüá¨üáß Please select a language to translate your message", reply_markup=reply_markup)

def button_callback(update, context):
    query = update.callback_query
    target_lang = query.data
    language_codes = {'–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': 'UK', 'English': 'EN', '–†—É—Å—Å–∫–∏–π': 'RU'}

    text = context.user_data.get('text_to_translate', '')

    response = requests.post(DEEPL_API_ENDPOINT, data={
        'auth_key': DEEPL_API_KEY,
        'text': text,
        'target_lang': language_codes[target_lang]
    })

    if response.status_code == 200:
        translation = response.json()['translations'][0]['text']
        context.bot.send_message(chat_id=query.message.chat_id, text=translation)
    else:
        context.bot.send_message(chat_id=query.message.chat_id, text='üá∫üá¶ –í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞.\nüá¨üáß Sorry, an error occurred.')

if __name__ == '__main__':
    updater = Updater(token='Insert the key here', use_context=True)
    dispatcher = updater.dispatcher

    start_handler = CommandHandler('start', start)
    dispatcher.add_handler(start_handler)

    translate_handler = MessageHandler(Filters.text & ~Filters.command, translate)
    dispatcher.add_handler(translate_handler)

    dispatcher.add_handler(CallbackQueryHandler(button_callback))

    updater.start_polling()
    updater.idle()